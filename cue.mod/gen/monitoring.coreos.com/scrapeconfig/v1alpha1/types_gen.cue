// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni vendor crd -f https://github.com/prometheus-operator/prometheus-operator/releases/download/v0.71.0/stripped-down-crds.yaml

package v1alpha1

import "strings"

#ScrapeConfig: {
	apiVersion: "monitoring.coreos.com/v1alpha1"
	kind:       "ScrapeConfig"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}
	spec!: #ScrapeConfigSpec
}
#ScrapeConfigSpec: {
	authorization?: {
		credentials?: {
			key:       string
			name?:     string
			optional?: bool
		}
		type?: string
	}
	azureSDConfigs?: [...{
		authenticationMethod?: "OAuth" | "ManagedIdentity"
		clientID?:             string
		clientSecret?: {
			key:       string
			name?:     string
			optional?: bool
		}
		environment?:     string
		port?:            int
		refreshInterval?: =~"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$"
		resourceGroup?:   string
		subscriptionID:   strings.MinRunes(1)
		tenantID?:        string
	}]
	basicAuth?: {
		password?: {
			key:       string
			name?:     string
			optional?: bool
		}
		username?: {
			key:       string
			name?:     string
			optional?: bool
		}
	}
	consulSDConfigs?: [...{
		allowStale?: bool
		authorization?: {
			credentials?: {
				key:       string
				name?:     string
				optional?: bool
			}
			type?: string
		}
		basicAuth?: {
			password?: {
				key:       string
				name?:     string
				optional?: bool
			}
			username?: {
				key:       string
				name?:     string
				optional?: bool
			}
		}
		datacenter?:      string
		enableHTTP2?:     bool
		followRedirects?: bool
		namespace?:       string
		noProxy?:         string
		nodeMeta?: {
			[string]: string
		}
		oauth2?: {
			clientId: {
				configMap?: {
					key:       string
					name?:     string
					optional?: bool
				}
				secret?: {
					key:       string
					name?:     string
					optional?: bool
				}
			}
			clientSecret: {
				key:       string
				name?:     string
				optional?: bool
			}
			endpointParams?: {
				[string]: string
			}
			scopes?: [...string]
			tokenUrl: strings.MinRunes(1)
		}
		partition?: string
		proxyConnectHeader?: {
			[string]: {
				key:       string
				name?:     string
				optional?: bool
			}
		}
		proxyFromEnvironment?: bool
		proxyUrl?:             =~"^http(s)?://.+$"
		refreshInterval?:      =~"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$"
		scheme?:               "HTTP" | "HTTPS"
		server:                strings.MinRunes(1)
		services?: [...string]
		tagSeparator?: string
		tags?: [...string]
		tlsConfig?: {
			ca?: {
				configMap?: {
					key:       string
					name?:     string
					optional?: bool
				}
				secret?: {
					key:       string
					name?:     string
					optional?: bool
				}
			}
			cert?: {
				configMap?: {
					key:       string
					name?:     string
					optional?: bool
				}
				secret?: {
					key:       string
					name?:     string
					optional?: bool
				}
			}
			insecureSkipVerify?: bool
			keySecret?: {
				key:       string
				name?:     string
				optional?: bool
			}
			serverName?: string
		}
		tokenRef?: {
			key:       string
			name?:     string
			optional?: bool
		}
	}]
	dnsSDConfigs?: [...{
		names: [...string] & [_, ...]
		port?:            int
		refreshInterval?: =~"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$"
		type?:            "SRV" | "A" | "AAAA" | "MX"
	}]
	ec2SDConfigs?: [...{
		accessKey?: {
			key:       string
			name?:     string
			optional?: bool
		}
		filters?: [...{
			name: string
			values: [...string]
		}]
		port?:            int
		refreshInterval?: =~"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$"
		region?:          string
		roleARN?:         string
		secretKey?: {
			key:       string
			name?:     string
			optional?: bool
		}
	}]
	fileSDConfigs?: [...{
		files: [...=~"^[^*]*(\\*[^/]*)?\\.(json|yml|yaml|JSON|YML|YAML)$"] & [_, ...]
		refreshInterval?: =~"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$"
	}]
	gceSDConfigs?: [...{
		filter?:          string
		port?:            int
		project:          strings.MinRunes(1)
		refreshInterval?: =~"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$"
		tagSeparator?:    string
		zone:             strings.MinRunes(1)
	}]
	honorLabels?:     bool
	honorTimestamps?: bool
	httpSDConfigs?: [...{
		authorization?: {
			credentials?: {
				key:       string
				name?:     string
				optional?: bool
			}
			type?: string
		}
		basicAuth?: {
			password?: {
				key:       string
				name?:     string
				optional?: bool
			}
			username?: {
				key:       string
				name?:     string
				optional?: bool
			}
		}
		noProxy?: string
		proxyConnectHeader?: {
			[string]: {
				key:       string
				name?:     string
				optional?: bool
			}
		}
		proxyFromEnvironment?: bool
		proxyUrl?:             =~"^http(s)?://.+$"
		refreshInterval?:      =~"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$"
		tlsConfig?: {
			ca?: {
				configMap?: {
					key:       string
					name?:     string
					optional?: bool
				}
				secret?: {
					key:       string
					name?:     string
					optional?: bool
				}
			}
			cert?: {
				configMap?: {
					key:       string
					name?:     string
					optional?: bool
				}
				secret?: {
					key:       string
					name?:     string
					optional?: bool
				}
			}
			insecureSkipVerify?: bool
			keySecret?: {
				key:       string
				name?:     string
				optional?: bool
			}
			serverName?: string
		}
		url: strings.MinRunes(1) & {
			=~"^http(s)?://.+$"
		}
	}]
	keepDroppedTargets?: int
	kubernetesSDConfigs?: [...{
		apiServer?: string
		attachMetadata?: {
			node?: bool
		}
		authorization?: {
			credentials?: {
				key:       string
				name?:     string
				optional?: bool
			}
			type?: string
		}
		basicAuth?: {
			password?: {
				key:       string
				name?:     string
				optional?: bool
			}
			username?: {
				key:       string
				name?:     string
				optional?: bool
			}
		}
		enableHTTP2?:     bool
		followRedirects?: bool
		namespaces?: {
			names?: [...string]
			ownNamespace?: bool
		}
		noProxy?: string
		oauth2?: {
			clientId: {
				configMap?: {
					key:       string
					name?:     string
					optional?: bool
				}
				secret?: {
					key:       string
					name?:     string
					optional?: bool
				}
			}
			clientSecret: {
				key:       string
				name?:     string
				optional?: bool
			}
			endpointParams?: {
				[string]: string
			}
			scopes?: [...string]
			tokenUrl: strings.MinRunes(1)
		}
		proxyConnectHeader?: {
			[string]: {
				key:       string
				name?:     string
				optional?: bool
			}
		}
		proxyFromEnvironment?: bool
		proxyUrl?:             =~"^http(s)?://.+$"
		role:                  "Node" | "node" | "Service" | "service" | "Pod" | "pod" | "Endpoints" | "endpoints" | "EndpointSlice" | "endpointslice" | "Ingress" | "ingress"
		selectors?: [...{
			field?: string
			label?: string
			role:   "Node" | "node" | "Service" | "service" | "Pod" | "pod" | "Endpoints" | "endpoints" | "EndpointSlice" | "endpointslice" | "Ingress" | "ingress"
		}]
		tlsConfig?: {
			ca?: {
				configMap?: {
					key:       string
					name?:     string
					optional?: bool
				}
				secret?: {
					key:       string
					name?:     string
					optional?: bool
				}
			}
			cert?: {
				configMap?: {
					key:       string
					name?:     string
					optional?: bool
				}
				secret?: {
					key:       string
					name?:     string
					optional?: bool
				}
			}
			insecureSkipVerify?: bool
			keySecret?: {
				key:       string
				name?:     string
				optional?: bool
			}
			serverName?: string
		}
	}]
	labelLimit?:            int
	labelNameLengthLimit?:  int
	labelValueLengthLimit?: int
	metricRelabelings?: [...{
		action?:      "replace" | "Replace" | "keep" | "Keep" | "drop" | "Drop" | "hashmod" | "HashMod" | "labelmap" | "LabelMap" | "labeldrop" | "LabelDrop" | "labelkeep" | "LabelKeep" | "lowercase" | "Lowercase" | "uppercase" | "Uppercase" | "keepequal" | "KeepEqual" | "dropequal" | "DropEqual" | *"replace"
		modulus?:     int
		regex?:       string
		replacement?: string
		separator?:   string
		sourceLabels?: [...=~"^[a-zA-Z_][a-zA-Z0-9_]*$"]
		targetLabel?: string
	}]
	metricsPath?: string
	noProxy?:     string
	openstackSDConfigs?: [...{
		allTenants?:                bool
		applicationCredentialId?:   string
		applicationCredentialName?: string
		applicationCredentialSecret?: {
			key:       string
			name?:     string
			optional?: bool
		}
		availability?:     "Public" | "public" | "Admin" | "admin" | "Internal" | "internal"
		domainID?:         string
		domainName?:       string
		identityEndpoint?: string
		password?: {
			key:       string
			name?:     string
			optional?: bool
		}
		port?:            int
		projectID?:       string
		projectName?:     string
		refreshInterval?: =~"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$"
		region:           strings.MinRunes(1)
		role:             "Instance" | "instance" | "Hypervisor" | "hypervisor"
		tlsConfig?: {
			ca?: {
				configMap?: {
					key:       string
					name?:     string
					optional?: bool
				}
				secret?: {
					key:       string
					name?:     string
					optional?: bool
				}
			}
			cert?: {
				configMap?: {
					key:       string
					name?:     string
					optional?: bool
				}
				secret?: {
					key:       string
					name?:     string
					optional?: bool
				}
			}
			insecureSkipVerify?: bool
			keySecret?: {
				key:       string
				name?:     string
				optional?: bool
			}
			serverName?: string
		}
		userid?:   string
		username?: string
	}]
	params?: {
		[string]: [...string]
	}
	proxyConnectHeader?: {
		[string]: {
			key:       string
			name?:     string
			optional?: bool
		}
	}
	proxyFromEnvironment?: bool
	proxyUrl?:             =~"^http(s)?://.+$"
	relabelings?: [...{
		action?:      "replace" | "Replace" | "keep" | "Keep" | "drop" | "Drop" | "hashmod" | "HashMod" | "labelmap" | "LabelMap" | "labeldrop" | "LabelDrop" | "labelkeep" | "LabelKeep" | "lowercase" | "Lowercase" | "uppercase" | "Uppercase" | "keepequal" | "KeepEqual" | "dropequal" | "DropEqual" | *"replace"
		modulus?:     int
		regex?:       string
		replacement?: string
		separator?:   string
		sourceLabels?: [...=~"^[a-zA-Z_][a-zA-Z0-9_]*$"]
		targetLabel?: string
	}]
	sampleLimit?:    int
	scheme?:         "HTTP" | "HTTPS"
	scrapeInterval?: =~"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$"
	scrapeTimeout?:  =~"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$"
	staticConfigs?: [...{
		labels?: {
			[string]: string
		}
		targets?: [...string]
	}]
	targetLimit?: int
	tlsConfig?: {
		ca?: {
			configMap?: {
				key:       string
				name?:     string
				optional?: bool
			}
			secret?: {
				key:       string
				name?:     string
				optional?: bool
			}
		}
		cert?: {
			configMap?: {
				key:       string
				name?:     string
				optional?: bool
			}
			secret?: {
				key:       string
				name?:     string
				optional?: bool
			}
		}
		insecureSkipVerify?: bool
		keySecret?: {
			key:       string
			name?:     string
			optional?: bool
		}
		serverName?: string
	}
	trackTimestampsStaleness?: bool
}
